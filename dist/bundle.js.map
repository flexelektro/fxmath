{
  "version": 3,
  "sources": ["../src/index.ts", "../src/common.ts", "../src/v2.ts"],
  "sourcesContent": ["import V2 from \"./v2\"\n\nexport {V2}\nexport { quinticinterpol } from './common';\nexport { smoothstep } from './common';\nexport { fract } from './common';\nexport { createPseudoPoissonDistribution } from './common';\n", "import V2,{v2} from './v2';\n\ndeclare function fxrand(): number;\n\nexport type IPos = {\n  x: number;\n  y: number;\n}\n\nconst {PI,log,sin,cos,tan,atan,atan2,random,floor,ceil,sqrt,round, exp,pow} = Math;\nconst PI2 = PI * 2;\n\nconst map = (n: number, start: number, stop: number, targetStart: number, targetStop: number) => {\n  const newVal = targetStart + (n - start) / (stop - start) * (targetStop - targetStart);\n  return newVal;\n}\n\nconst lerp = (start: number, stop: number, amt: number) => {\n  return amt * (stop - start) + start;\n}\n\nconst mix = lerp;\n\nconst dist = (ax: number, ay: number, bx: number, by: number) => {\n  return Math.sqrt(Math.pow((ax - bx), 2) + Math.pow((ay - by), 2));\n}\n\nconst rnd = (a: number, b: number,mathrandom = false) => {\n  const random = mathrandom ? Math.random() :RND()\n  return a + (b - a) * random;\n}\n\nconst rndInt = (low:number,high:number) => {\n  return low + Math.floor( RND() * ( high - low + 1 ) );\n}\n\nconst random2 = (a: number,seed = 12345) => {\n  let x = Math.sin(a * seed) * 10000;\n  return x - Math.floor(x);\n}\n\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\n\nconst mulberry32RND = (a:number) => {\n  return function() {\n    var t = a += 0x6D2B79F5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\n  }\n}\n\n// @ts-ignore\nlet mullBerryRND = mulberry32RND(window.fxrand ? fxrand()*10000 : Math.random()*10000)\n\nconst resetRNDHASH = (hash:number) => {\n  mullBerryRND = mulberry32RND(hash)\n}\n\nconst RND = () => {\n  // @ts-ignore\n  return mullBerryRND(); //Math.random();\n}\n\nconst weightedRandomLn = (rand0to1: number, zeroHasHeigherProb = true) => {\n  let e = Math.exp(1);\n  let x0 = Math.pow(e, 2) - 1; // At x0 this will become 1 ---\n  let x = x0 * rand0to1;\n  let rnd = (Math.log(1 + x) / 2);\n\n  if(zeroHasHeigherProb){\n    return 1 - rnd;\n  } else{\n    return rnd;\n  }\n}\n\n\n\n\nconst rand_box_muller = () : number => {\n  let u = 0, v = 0;\n  while(u === 0) u = RND();\n  while(v === 0) v = RND();\n  let num = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\n  num = num / 10.0 + 0.5; // Translate to 0 -> 1\n  if (num > 1 || num < 0) return rand_box_muller() // resample between 0 and 1\n  return num\n}\nconst pickRandom = (...args: any[]) => {\n  let len = args.length;\n  let rnd = Math.round(RND() * (len - 1));\n  return args[rnd];\n}\n\nconst pickRandomFromArray = <T>(arr: T[],splice=false) => {\n  let len = arr.length;\n  // @ts-ignore\n  let _rnd = window.fxrand ? fxrand() : Math.random();\n  let rnd = Math.round(_rnd * (len - 1));\n  if(splice){\n    let el =  arr.splice(rnd,1);\n    return el[0];\n  }\n  return arr[rnd];\n}\n\nconst fract = (x: number) => {\n  return x - Math.floor(x);\n}\nconst clamp = (x: number, min = 0, max = 1) => {\n  return Math.min(max, Math.max(x, min));\n}\n\nconst modWrap = (x: number, min = 0, max = 1) => {\n    return (x+(max-min)) % (max - min) + min;\n}\n\n\nconst smoothstep = (edge0: number, edge1: number, x: number) => {\n  const t = clamp((x - edge0) / (edge1 - edge0), 0, 1);\n  return t * t * (3 - 2 * t);\n}\nconst quinticinterpol = (edge0: number, edge1: number, x0: number) => {\n  const x = clamp((x0 - edge0) / (edge1 - edge0), 0, 1);\n  return x * x * x * (x * (x * 6 - 15) + 10);\n}\n\n\nconst createPseudoPoissonDistribution = (OPT: {W: number, H: number, size: number, perc: number, hasShiftRow: boolean}) => {\n  const {W,H,size,perc,hasShiftRow} = OPT;\n\n  let dots: V2[][] = [];\n  let anzX = Math.ceil(W / size);\n  let anzY = Math.ceil(H / size);\n\n  for(let i = 0; i < anzY; i++){\n    let row = [];\n    for(let j = 0; j < anzX; j++){\n      let shiftrow = hasShiftRow ? (i % 2 === 0 ? size / 2 : 0) : 0;\n      let _rnd = fxrand ? fxrand() : Math.random();\n      let _rnd2 = fxrand ? fxrand() : Math.random();\n      let phi = _rnd * 2 * Math.PI;\n      let dr = weightedRandomLn(_rnd2) * perc / 100 * size;\n      let dx = dr * Math.cos(phi);\n      let dy = dr * Math.sin(phi);\n      row.push(V2.create( j * size + size / 2 + shiftrow + dx,  i * size + size / 2 + dy ))\n    }\n    dots.push(row)\n  }\n  return dots;\n}\n\n\nconst randomWeightedFromArray = <T>(arr:{value:T,prob:number,start?: number, end?: number}[]) => {\n\n  let probSum = arr.reduce((prev, curr) => {\n    return prev + curr.prob\n  }, 0);\n\n  let iterate = 0;\n  arr.forEach(item => {\n    item.start = iterate;\n    item.end = iterate + item.prob;\n    iterate = item.end;\n  })\n\n  // @ts-ignore\n  let r = window.fxrand ? fxrand() : Math.random();\n  let rnd = r * probSum;\n  let theOne = arr.find((itm: any) => {\n    return (itm.start <= rnd && itm.end > rnd);\n  })\n\n  return theOne!.value as T\n\n}\n\nconst swapVals = (a:number,b:number) => {\n  let temp = b;\n  b = a;\n  a = temp;\n  return []\n}\n\n\nconst isEven = (n: number) => {\n  return n % 2 === 0;\n}\n\nfunction sawTooth(_x:number, A:number) {\n  let x = _x + 1000*A;\n  var result = x % (2 * A);\n  if(result > A) {\n    return 2 * A - result;\n  } else {\n    return result;\n  }\n}\n\nfunction make2dSquareArray(MAP_DIMENSION: number) {\n  let map3d: any[][] = [];\n  for (let iy = 0; iy < MAP_DIMENSION; iy++) {\n    let row: number[] = [];\n    for (let ix = 0; ix < MAP_DIMENSION; ix++) {\n      row.push(0);\n    }\n    map3d.push(row);\n  }\n  return map3d;\n}\n\nfunction make2dArray(MAP_DIMENSION_Y: number,MAP_DIMENSION_X: number) {\n  let map3d: any[][] = [];\n  for (let iy = 0; iy < MAP_DIMENSION_Y; iy++) {\n    let row: number[] = [];\n    for (let ix = 0; ix < MAP_DIMENSION_X; ix++) {\n      row.push(0);\n    }\n    map3d.push(row);\n  }\n  return map3d;\n}\n\n\nfunction shuffleArray(array:any[]) {\n  let currentIndex = array.length, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(RND() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\n\nexport {resetRNDHASH, map, lerp, mix, dist, rnd,RND, random2, fract, \n  clamp, smoothstep,quinticinterpol, weightedRandomLn, pickRandomFromArray, pickRandom,\n  createPseudoPoissonDistribution,randomWeightedFromArray,\n  PI,PI2,log,sin,cos,tan,atan2,atan,random,floor,ceil,sqrt,swapVals,round,exp,pow,rndInt,isEven,rand_box_muller,\n    sawTooth,make2dArray,make2dSquareArray,modWrap,shuffleArray\n}\n\n", "import {rnd} from \"./common\";\n\nconst lerp = (start: number, stop: number, amt: number) => {\n  return amt * (stop - start) + start;\n}\n\nconst v2 = (x: number, y: number) => {\n  return new V2(x, y)\n}\n\nclass V2{\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number){\n    this.x = x;\n    this.y = y;\n  }\n\n  public static fromTo(a:V2,b:V2){\n    return v2(b.x - a.x,b.y - a.y);\n  }\n\n  public static sameLike(a:V2,b:V2){\n    return a.x === b.x && a.y === b.y;\n  }\n\n  public static linesIntersect  (pA:V2,pA2:V2,pB:V2,pB2:V2)  {\n    // See Paul Bourke http://paulbourke.net/geometry/pointlineplane/\n    let x1 = pA.x;\n    let y1 = pA.y;\n    let x2 = pA2.x;\n    let y2 = pA2.y;\n    let x3 = pB.x;\n    let y3 = pB.y;\n    let x4 = pB2.x;\n    let y4 = pB2.y;\n\n    let a = V2.subtract(pA2,pA);\n    let b = V2.subtract(pB,pB2)\n\n    if(a.magnitude === 0 || b.magnitude === 0) return false;\n\n    let denominator =   ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1))\n\n    // Lines are parallel\n    if (denominator === 0) {\n      return false\n    }\n\n    let ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator\n    let ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator\n    // is the intersection along the segments\n    if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n      return false\n    }\n\n    // Return a object with the x and y coordinates of the intersection\n    let x = x1 + ua * (x2 - x1)\n    let y = y1 + ua * (y2 - y1)\n\n    return v2(x,y)\n  }\n\n  public static isPointInPolygon(p:V2,poly:V2[]){\n    let len = poly.length;\n    let inside = false;\n    for (let i = 0, j = len - 1 ; i < len; j = i++) {\n      if(\n          ((poly[i].y > p.y) !== (poly[j].y > p.y)) &&\n          (p.x < (poly[j].x- poly[i].x) * (p.y - poly[i].y) / (poly[j].y-poly[i].y) + poly[i].x)\n      ){\n        inside = !inside;\n      }\n    }\n    return inside;\n  }\n\n  public static create(x: number, y: number){\n    return new V2(x, y);\n  }\n\n  public static createByMagnitudeAndAngle(mag: number, angle: number): V2{\n    return new V2(mag * Math.cos(angle), mag * Math.sin(angle));\n  }\n\n  public static getAngle(v: V2): number{\n    return Math.atan2(v.y, v.x);\n  }\n\n  public static angleBetween(a:V2,b:V2){\n   return Math.acos(V2.dotprod(a,b) / (a.magnitude*b.magnitude))\n  }\n\n  public static clone(v: V2){\n    return new V2(v.x, v.y)\n  }\n\n  public static magnitude(v: V2): number{\n    return v.magnitude;\n  }\n  public static length_(v: V2): number{\n    return v.magnitude;\n  }\n\n  public static squareMagnitude(v: V2): number{\n    return v.squareMagnitude;\n  }\n\n  public static distance(v1: V2, v2: V2): number{\n    return V2.subtract(v1, v2).magnitude\n  }\n\n  public static add(v1: V2, v2: V2): V2{\n    return new V2(v1.x + v2.x, v1.y + v2.y);\n  }\n\n  public static subtract(v1: V2, v2: V2): V2{\n    return new V2(v1.x - v2.x, v1.y - v2.y);\n  }\n\n  public static multiply(vector: V2, scalar: number): V2{\n    return new V2(\n      vector.x * scalar,\n      vector.y * scalar\n    )\n  }\n\n  public static multVec(v0: V2, v1: V2): V2{\n    return new V2(\n        v0.x * v1.x,\n        v0.y * v1.y\n    )\n  }\n\n  public static divide(v: V2, scalar: number): V2{\n    return V2.multiply(v, 1 / scalar);\n  }\n\n  public static dotprod(v1: V2, v2: V2): number{\n    return v1.x * v2.x + v1.y * v2.y;\n  }\n\n  public static dot(v1: V2, v2: V2): number{\n    return v1.x * v2.x + v1.y * v2.y;\n  }\n\n  public static crossprod(v1: V2, v2: V2): number{\n    return v1.x * v2.y - v1.y * v2.x;\n  }\n\n  public static unitVec(v:V2){\n    return V2.divide(v, v.magnitude);\n  }\n\n  public static projectionFromTo(v1: V2, v2: V2): V2{\n    let unitVector = V2.unitVec(v2);\n    return V2.multiply(unitVector, V2.dotprod(v1, unitVector));\n  }\n\n  public static rotate(v:V2,angle:number){\n    const a00 = Math.cos(angle);\n    const a01 = -Math.sin(angle);\n    const a10 = Math.sin(angle);\n    const a11 = Math.cos(angle);\n\n    const ux = v.x * a00 + v.y * a01;\n    const uy = v.x * a10 + v.y * a11;\n    return new V2(ux,uy);\n  }\n\n  public static rotateAroundPivot(point: V2, pivot: V2, angleRad: number){\n\n    const cos = Math.cos(angleRad);\n    const sin = Math.sin(angleRad);\n    const dx = point.x - pivot.x;\n    const dy = point.y - pivot.y;\n    const x = cos * dx - sin * dy + pivot.x;\n    const y = sin * dx + cos * dy + pivot.y;\n    return new V2(x, y);\n  }\n\n  public static normal(v:V2){\n    return new V2(-v.y,v.x)\n  }\n\n  public static normalLeft(v:V2){\n    return new V2(-v.y,v.x)\n  }\n  public static normalRight(v:V2){\n    return new V2(v.y,-v.x)\n  }\n\n  public static manhattanDistance(v1:V2,v2:V2){\n    return Math.abs(v1.x-v2.x)+Math.abs(v1.y-v2.y)\n  }\n\n  public static lerp(v1:V2,v2:V2,amt:number){\n    let x = lerp(v1.x,v2.x,amt);\n    let y = lerp(v1.y,v2.y,amt);\n    return new V2(x,y)\n  }\n\n  public clone(): V2{\n    return new V2(this.x, this.y);\n  }\n\n  public sameLike(v:V2){\n    return this.x === v.x && this.y === v.y;\n  }\n\n  // Same as clone\n  public copy(): V2{\n    return new V2(this.x, this.y);\n  }\n\n  public get angle(): number{\n    return Math.atan2(this.y, this.x);\n  }\n\n  public set angle(rad:number){\n    let mag = this.magnitude\n    this.x = mag * Math.cos(rad);\n    this.y = mag * Math.sin(rad);\n  }\n\n  public setAngle(rad:number){\n    let mag = this.magnitude;\n    this.x = mag * Math.cos(rad);\n    this.y = mag * Math.sin(rad);\n    return this;\n  }\n\n  public get degree(): number{\n    return 360 / (2 * Math.PI) * Math.atan2(this.y, this.x);\n  }\n\n  public get normalRight(){\n    let x  = -this.y;\n    let y = this.x;\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  public get normalLeft(){\n    let x  = this.y;\n    let y = -this.x;\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  public set degree(degree:number){\n    let rad = (Math.PI*2/360) * degree;\n    this.setAngle(rad);\n  }\n\n  public setDegree(degree:number){\n    let rad = (Math.PI*2/360) * degree;\n    return this.setAngle(rad);\n  }\n\n\n  public get magnitude(): number{\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n  public get length(): number{\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  public get squareMagnitude(): number{\n    return this.x * this.x + this.y * this.y;\n  }\n\n  public distance(v: V2): number{\n    return V2.subtract(this,v).magnitude\n  }\n\n  public unitVec(): V2{\n    return this.divide(this.magnitude);\n  }\n\n  public add(v: V2): this{\n    this.x += v.x;\n    this.y += v.y;\n    return this;\n  }\n\n  public addRnd(rand:number){\n    this.x += rnd(-rand,rand)\n    this.y += rnd(-rand,rand)\n    return this;\n  }\n\n  public subtract(v: V2): this{\n    this.x -= v.x;\n    this.y -= v.y;\n    return this;\n  }\n\n  public multiply(scalar: number): this{\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  public multVec(v: V2): this{\n    this.x *= v.x;\n    this.y *= v.y;\n    return this;\n  }\n\n  public divide(scalar: number): this{\n    return this.multiply(1 / scalar);\n  }\n\n  public dotprod(v: V2): number{\n    return this.x * v.x + this.y * v.y;\n  }\n\n  public dot(v: V2): number{\n    return this.x * v.x + this.y * v.y;\n  }\n\n  public crossprod(v: V2): number{\n    return this.x * v.y - this.y * v.x;\n  }\n\n  public rotate(angle:number){\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    let x = (this.x * c - this.y * s);\n    let y = (this.x * s + this.y * c);\n\n    this.x = x;\n    this.y = y;\n    return this\n  }\n\n  public rotateAroundPivot(pivot: V2, angleRad: number){\n\n    const cos = Math.cos(angleRad);\n    const sin = Math.sin(angleRad);\n    const dx = this.x - pivot.x;\n    const dy = this.y - pivot.y;\n    const x = cos * dx - sin * dy + pivot.x;\n    const y = sin * dx + cos * dy + pivot.y;\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  public normal(){\n    let x = -this.y;\n    let y = this.x;\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n\n\n  public lerp(v:V2,amt:number){\n    let x = lerp(this.x,v.x,amt);\n    let y = lerp(this.y,v.y,amt);\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  public floorValues(){\n    this.x = this.x|0;\n    this.y = this.y|0;\n    return this;\n  }\n\n  public isInPolygon(poly:V2[]){\n    return V2.isPointInPolygon(this,poly)\n  }\n\n}\n\nexport { v2 }\nexport default V2\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "v2_default", "createPseudoPoissonDistribution", "fract", "quinticinterpol", "smoothstep", "__toCommonJS", "PI", "log", "sin", "cos", "tan", "atan", "atan2", "random", "floor", "ceil", "sqrt", "round", "exp", "pow", "PI2", "rnd", "a", "b", "mathrandom", "random", "RND", "mulberry32RND", "a", "mullBerryRND", "RND", "mullBerryRND", "weightedRandomLn", "rand0to1", "zeroHasHeigherProb", "x", "rnd", "fract", "x", "clamp", "min", "max", "smoothstep", "edge0", "edge1", "x", "t", "clamp", "quinticinterpol", "x0", "createPseudoPoissonDistribution", "OPT", "W", "H", "size", "perc", "hasShiftRow", "dots", "anzX", "anzY", "i", "row", "j", "shiftrow", "_rnd", "_rnd2", "phi", "dr", "weightedRandomLn", "dx", "dy", "v2_default", "lerp", "start", "stop", "amt", "v2", "x", "y", "V2", "_V2", "a", "b", "pA", "pA2", "pB", "pB2", "x1", "y1", "x2", "y2", "x3", "y3", "x4", "y4", "denominator", "ua", "ub", "p", "poly", "len", "inside", "j", "mag", "angle", "v", "v1", "vector", "scalar", "v0", "unitVector", "a00", "a01", "a10", "a11", "ux", "uy", "point", "pivot", "angleRad", "cos", "sin", "dx", "dy", "rad", "degree", "rand", "rnd", "c", "s", "v2_default", "V2"]
}
