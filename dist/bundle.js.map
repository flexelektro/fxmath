{
  "version": 3,
  "sources": ["../src/index.ts", "../src/common.ts", "../src/v2.ts", "../src/v3.ts"],
  "sourcesContent": ["// Weiterer Test\nimport {V2,v2} from \"./v2\";\nimport {V3,v3} from \"./v3\";\n\nexport {V2, v2, V3, v3}\nexport {\n    quinticinterpol,\n    smoothstep,\n    fract,\n    clamp,\n    rnd,\n    rndInt,\n    isEven,\n    createPseudoPoissonDistribution,\n    randomWeightedFromArray,\n    pickRandomFromArray,\n    lerp,\n    mix,\n    dist,\n    pickRandom,\n    random2,\n    RND,\n    PI2,\n    log,\n    sin,\n    cos,\n    tan,\n    atan2,\n    random,\n    floor,\n    ceil,\n    sqrt,\n    swapVals,\n    round,\n    exp,\n    pow\n    ,\n    map,\n    modWrap,\n    shuffleArray,\n    make2dArray,\n    make2dSquareArray,\n    IPos,\n    PI,\n    sawTooth,\n    weightedRandomLn,\n    resetRNDHASH,\n    atan\n} from './common';\n\n", "import {V2,v2} from './v2';\n\ndeclare interface FxHashAPI {\n  hash: string;\n  rand: () => number;\n  minter: string;\n  randminter: () => number;\n  preview: () => void;\n  isPreview: boolean;\n  params: (definitions: any) => void;\n  getParam: (id: string) => any;\n  getParams: () => any;\n  getRawParam: (id: string) => any;\n  getRawParams: () => any;\n  getDefinitions: () => any;\n  features: (features: any) => void;\n  getFeature: (id: string) => any;\n  getFeatures: () => any;\n  stringifyParams: (definitions: any) => string;\n}\n\ndeclare interface Window {\n  $fx: FxHashAPI;\n}\n\nexport type IPos = {\n  x: number;\n  y: number;\n}\n\nconst {PI,log,sin,cos,tan,atan,atan2,random,floor,ceil,sqrt,round, exp,pow} = Math;\nconst PI2 = PI * 2;\n\nconst map = (n: number, start: number, stop: number, targetStart: number, targetStop: number) => {\n  const newVal = targetStart + (n - start) / (stop - start) * (targetStop - targetStart);\n  return newVal;\n}\n\nconst lerp = (start: number, stop: number, amt: number) => {\n  return amt * (stop - start) + start;\n}\n\nconst mix = lerp;\n\nconst dist = (ax: number, ay: number, bx: number, by: number) => {\n  return Math.sqrt(Math.pow((ax - bx), 2) + Math.pow((ay - by), 2));\n}\n\nconst rnd = (a: number, b: number,mathrandom = false) => {\n  const random = mathrandom ? Math.random() :RND()\n  return a + (b - a) * random;\n}\n\nconst rndInt = (low:number,high:number) => {\n  return low + Math.floor( RND() * ( high - low + 1 ) );\n}\n\nconst random2 = (a: number,seed = 12345) => {\n  let x = Math.sin(a * seed) * 10000;\n  return x - Math.floor(x);\n}\n\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\n\nconst mulberry32RND = (a:number) => {\n  return function() {\n    var t = a += 0x6D2B79F5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\n  }\n}\n\n// @ts-ignore\nif(window?.$fx){console.log(\"fxhash-api detected\",window?.$fx.hash,window?.$fx.rand())}\n// @ts-ignore\nlet mullBerryRND = mulberry32RND((typeof window !== \"undefined\" && window?.$fx) ? $fx.rand()*10000 : Math.random()*10000)\n\nconst resetRNDHASH = (hash:number) => {\n  mullBerryRND = mulberry32RND(hash)\n}\n\nconst RND = () => {\n  // @ts-ignore\n  return mullBerryRND(); //Math.random();\n}\n\nconst weightedRandomLn = (rand0to1: number, zeroHasHeigherProb = true) => {\n  let e = Math.exp(1);\n  let x0 = Math.pow(e, 2) - 1; // At x0 this will become 1 ---\n  let x = x0 * rand0to1;\n  let rnd = (Math.log(1 + x) / 2);\n\n  if(zeroHasHeigherProb){\n    return 1 - rnd;\n  } else{\n    return rnd;\n  }\n}\n\n\n\n\nconst rand_box_muller = () : number => {\n  let u = 0, v = 0;\n  while(u === 0) u = RND();\n  while(v === 0) v = RND();\n  let num = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\n  num = num / 10.0 + 0.5; // Translate to 0 -> 1\n  if (num > 1 || num < 0) return rand_box_muller() // resample between 0 and 1\n  return num\n}\nconst pickRandom = (...args: any[]) => {\n  let len = args.length;\n  let rnd = Math.round(RND() * (len - 1));\n  return args[rnd];\n}\n\nconst pickRandomFromArray = <T>(arr: T[],splice=false) => {\n  let len = arr.length;\n  // @ts-ignore\n  let _rnd = window.fxrand ? fxrand() : Math.random();\n  let rnd = Math.round(_rnd * (len - 1));\n  if(splice){\n    let el =  arr.splice(rnd,1);\n    return el[0];\n  }\n  return arr[rnd];\n}\n\nconst fract = (x: number) => {\n  return x - Math.floor(x);\n}\nconst clamp = (x: number, min = 0, max = 1) => {\n  return Math.min(max, Math.max(x, min));\n}\n\nconst modWrap = (x: number, min = 0, max = 1) => {\n    return (x+(max-min)) % (max - min) + min;\n}\n\n\nconst smoothstep = (edge0: number, edge1: number, x: number) => {\n  const t = clamp((x - edge0) / (edge1 - edge0), 0, 1);\n  return t * t * (3 - 2 * t);\n}\nconst quinticinterpol = (edge0: number, edge1: number, x0: number) => {\n  const x = clamp((x0 - edge0) / (edge1 - edge0), 0, 1);\n  return x * x * x * (x * (x * 6 - 15) + 10);\n}\n\n\nconst createPseudoPoissonDistribution = (OPT: {W: number, H: number, size: number, perc: number, hasShiftRow: boolean}) => {\n  const {W,H,size,perc,hasShiftRow} = OPT;\n\n  let dots: V2[][] = [];\n  let anzX = Math.ceil(W / size);\n  let anzY = Math.ceil(H / size);\n\n  for(let i = 0; i < anzY; i++){\n    let row:V2[] = [];\n    for(let j = 0; j < anzX; j++){\n      let shiftrow = hasShiftRow ? (i % 2 === 0 ? size / 2 : 0) : 0;\n      let _rnd = RND();\n      let _rnd2 = RND();\n      let phi = _rnd * 2 * Math.PI;\n      let dr = weightedRandomLn(_rnd2) * perc / 100 * size;\n      let dx = dr * Math.cos(phi);\n      let dy = dr * Math.sin(phi);\n      row.push(V2.create( j * size + size / 2 + shiftrow + dx,  i * size + size / 2 + dy ))\n    }\n    dots.push(row)\n  }\n  return dots;\n}\n\n\nconst randomWeightedFromArray = <T>(arr:{value:T,prob:number,start?: number, end?: number}[]) => {\n\n  let probSum = arr.reduce((prev, curr) => {\n    return prev + curr.prob\n  }, 0);\n\n  let iterate = 0;\n  arr.forEach(item => {\n    item.start = iterate;\n    item.end = iterate + item.prob;\n    iterate = item.end;\n  })\n\n  // @ts-ignore\n  let r = window.fxrand ? fxrand() : Math.random();\n  let rnd = r * probSum;\n  let theOne = arr.find((itm: any) => {\n    return (itm.start <= rnd && itm.end > rnd);\n  })\n\n  return theOne!.value as T\n\n}\n\nconst swapVals = (a:number,b:number) => {\n  let temp = b;\n  b = a;\n  a = temp;\n  return []\n}\n\n\nconst isEven = (n: number) => {\n  return n % 2 === 0;\n}\n\nfunction sawTooth(_x:number, A:number) {\n  let x = _x + 1000*A;\n  var result = x % (2 * A);\n  if(result > A) {\n    return 2 * A - result;\n  } else {\n    return result;\n  }\n}\n\nfunction make2dSquareArray(MAP_DIMENSION: number) {\n  let map3d: any[][] = [];\n  for (let iy = 0; iy < MAP_DIMENSION; iy++) {\n    let row: number[] = [];\n    for (let ix = 0; ix < MAP_DIMENSION; ix++) {\n      row.push(0);\n    }\n    map3d.push(row);\n  }\n  return map3d;\n}\n\nfunction make2dArray(MAP_DIMENSION_Y: number,MAP_DIMENSION_X: number) {\n  let map3d: any[][] = [];\n  for (let iy = 0; iy < MAP_DIMENSION_Y; iy++) {\n    let row: number[] = [];\n    for (let ix = 0; ix < MAP_DIMENSION_X; ix++) {\n      row.push(0);\n    }\n    map3d.push(row);\n  }\n  return map3d;\n}\n\n\nfunction shuffleArray(array:any[]) {\n  let currentIndex = array.length, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(RND() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\n\nexport {resetRNDHASH, map, lerp, mix, dist, rnd,RND, random2, fract, \n  clamp, smoothstep,quinticinterpol, weightedRandomLn, pickRandomFromArray, pickRandom,\n  createPseudoPoissonDistribution,randomWeightedFromArray,\n  PI,PI2,log,sin,cos,tan,atan2,atan,random,floor,ceil,sqrt,swapVals,round,exp,pow,rndInt,isEven,rand_box_muller,\n    sawTooth,make2dArray,make2dSquareArray,modWrap,shuffleArray\n}\n\n", "import {rnd,lerp} from \"./common\";\n\n\nconst v2 = (x: number, y: number) => {\n  return new V2(x, y)\n}\n\nclass V2{\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number){\n    this.x = x;\n    this.y = y;\n  }\n\n  public static fromTo(a:V2,b:V2){\n    return v2(b.x - a.x,b.y - a.y);\n  }\n\n  public static sameLike(a:V2,b:V2){\n    return a.x === b.x && a.y === b.y;\n  }\n\n  public static linesIntersect  (pA:V2,pA2:V2,pB:V2,pB2:V2)  {\n    // See Paul Bourke http://paulbourke.net/geometry/pointlineplane/\n    let x1 = pA.x;\n    let y1 = pA.y;\n    let x2 = pA2.x;\n    let y2 = pA2.y;\n    let x3 = pB.x;\n    let y3 = pB.y;\n    let x4 = pB2.x;\n    let y4 = pB2.y;\n\n    let a = V2.subtract(pA2,pA);\n    let b = V2.subtract(pB,pB2)\n\n    if(a.magnitude === 0 || b.magnitude === 0) return false;\n\n    let denominator =   ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1))\n\n    // Lines are parallel\n    if (denominator === 0) {\n      return false\n    }\n\n    let ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator\n    let ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator\n    // is the intersection along the segments\n    if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n      return false\n    }\n\n    // Return a object with the x and y coordinates of the intersection\n    let x = x1 + ua * (x2 - x1)\n    let y = y1 + ua * (y2 - y1)\n\n    return v2(x,y)\n  }\n\n  public static isPointInPolygon(p:V2,poly:V2[]):boolean{\n    let len = poly.length;\n    let inside = false;\n    for (let i = 0, j = len - 1 ; i < len; j = i++) {\n      if(\n          ((poly[i].y > p.y) !== (poly[j].y > p.y)) &&\n          (p.x < (poly[j].x- poly[i].x) * (p.y - poly[i].y) / (poly[j].y-poly[i].y) + poly[i].x)\n      ){\n        inside = !inside;\n      }\n    }\n    return inside;\n  }\n\n  public static create(x: number, y: number){\n    return new V2(x, y);\n  }\n\n  public static createByMagnitudeAndAngle(mag: number, angle: number): V2{\n    return new V2(mag * Math.cos(angle), mag * Math.sin(angle));\n  }\n\n  public static getAngle(v: V2): number{\n    return Math.atan2(v.y, v.x);\n  }\n\n  public static angleBetween(a:V2,b:V2){\n   return Math.acos(V2.dotprod(a,b) / (a.magnitude*b.magnitude))\n  }\n\n  public static clone(v: V2){\n    return new V2(v.x, v.y)\n  }\n\n  public static magnitude(v: V2): number{\n    return v.magnitude;\n  }\n  public static length_(v: V2): number{\n    return v.magnitude;\n  }\n\n  public static squareMagnitude(v: V2): number{\n    return v.squareMagnitude;\n  }\n\n  public static distance(v1: V2, v2: V2): number{\n    return V2.subtract(v1, v2).magnitude\n  }\n\n  public static add(v1: V2, v2: V2): V2{\n    return new V2(v1.x + v2.x, v1.y + v2.y);\n  }\n\n  public static subtract(v1: V2, v2: V2): V2{\n    return new V2(v1.x - v2.x, v1.y - v2.y);\n  }\n\n  public static multiply(vector: V2, scalar: number): V2{\n    return new V2(\n      vector.x * scalar,\n      vector.y * scalar\n    )\n  }\n\n  public static multVec(v0: V2, v1: V2): V2{\n    return new V2(\n        v0.x * v1.x,\n        v0.y * v1.y\n    )\n  }\n\n  public static divide(v: V2, scalar: number): V2{\n    return V2.multiply(v, 1 / scalar);\n  }\n\n  public static dotprod(v1: V2, v2: V2): number{\n    return v1.x * v2.x + v1.y * v2.y;\n  }\n\n  public static dot(v1: V2, v2: V2): number{\n    return v1.x * v2.x + v1.y * v2.y;\n  }\n\n  public static crossprod(v1: V2, v2: V2): number{\n    return v1.x * v2.y - v1.y * v2.x;\n  }\n\n  public static unitVec(v:V2){\n    return V2.divide(v, v.magnitude);\n  }\n\n  public static projectionFromTo(v1: V2, v2: V2): V2{\n    let unitVector = V2.unitVec(v2);\n    return V2.multiply(unitVector, V2.dotprod(v1, unitVector));\n  }\n\n  public static rotate(v:V2,angle:number){\n    const a00 = Math.cos(angle);\n    const a01 = -Math.sin(angle);\n    const a10 = Math.sin(angle);\n    const a11 = Math.cos(angle);\n\n    const ux = v.x * a00 + v.y * a01;\n    const uy = v.x * a10 + v.y * a11;\n    return new V2(ux,uy);\n  }\n\n  public static rotateAroundPivot(point: V2, pivot: V2, angleRad: number){\n\n    const cos = Math.cos(angleRad);\n    const sin = Math.sin(angleRad);\n    const dx = point.x - pivot.x;\n    const dy = point.y - pivot.y;\n    const x = cos * dx - sin * dy + pivot.x;\n    const y = sin * dx + cos * dy + pivot.y;\n    return new V2(x, y);\n  }\n\n  public static normal(v:V2){\n    return new V2(-v.y,v.x)\n  }\n\n  public static normalLeft(v:V2){\n    return new V2(-v.y,v.x)\n  }\n  public static normalRight(v:V2){\n    return new V2(v.y,-v.x)\n  }\n\n  public static manhattanDistance(v1:V2,v2:V2){\n    return Math.abs(v1.x-v2.x)+Math.abs(v1.y-v2.y)\n  }\n\n  public static lerp(v1:V2,v2:V2,amt:number){\n    let x = lerp(v1.x,v2.x,amt);\n    let y = lerp(v1.y,v2.y,amt);\n    return new V2(x,y)\n  }\n\n  public clone(): V2{\n    return new V2(this.x, this.y);\n  }\n\n  public sameLike(v:V2){\n    return this.x === v.x && this.y === v.y;\n  }\n\n  // Same as clone\n  public copy(): V2{\n    return new V2(this.x, this.y);\n  }\n\n  public get angle(): number{\n    return Math.atan2(this.y, this.x);\n  }\n\n  public set angle(rad:number){\n    let mag = this.magnitude\n    this.x = mag * Math.cos(rad);\n    this.y = mag * Math.sin(rad);\n  }\n\n  public setAngle(rad:number){\n    let mag = this.magnitude;\n    this.x = mag * Math.cos(rad);\n    this.y = mag * Math.sin(rad);\n    return this;\n  }\n\n  public get degree(): number{\n    return 360 / (2 * Math.PI) * Math.atan2(this.y, this.x);\n  }\n\n  public get normalRight(){\n    let x  = -this.y;\n    let y = this.x;\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  public get normalLeft(){\n    let x  = this.y;\n    let y = -this.x;\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  public set degree(degree:number){\n    let rad = (Math.PI*2/360) * degree;\n    this.setAngle(rad);\n  }\n\n  public setDegree(degree:number){\n    let rad = (Math.PI*2/360) * degree;\n    return this.setAngle(rad);\n  }\n\n\n  public get magnitude(): number{\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n  public get length(): number{\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  public get squareMagnitude(): number{\n    return this.x * this.x + this.y * this.y;\n  }\n\n  public distance(v: V2): number{\n    return V2.subtract(this,v).magnitude\n  }\n\n  public unitVec(): V2{\n    return this.divide(this.magnitude);\n  }\n\n  public add(v: V2): this{\n    this.x += v.x;\n    this.y += v.y;\n    return this;\n  }\n\n  public addRnd(rand:number){\n    this.x += rnd(-rand,rand)\n    this.y += rnd(-rand,rand)\n    return this;\n  }\n\n  public subtract(v: V2): this{\n    this.x -= v.x;\n    this.y -= v.y;\n    return this;\n  }\n\n  public multiply(scalar: number): this{\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  public multVec(v: V2): this{\n    this.x *= v.x;\n    this.y *= v.y;\n    return this;\n  }\n\n  public divide(scalar: number): this{\n    return this.multiply(1 / scalar);\n  }\n\n  public dotprod(v: V2): number{\n    return this.x * v.x + this.y * v.y;\n  }\n\n  public dot(v: V2): number{\n    return this.x * v.x + this.y * v.y;\n  }\n\n  public crossprod(v: V2): number{\n    return this.x * v.y - this.y * v.x;\n  }\n\n  public rotate(angle:number){\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    let x = (this.x * c - this.y * s);\n    let y = (this.x * s + this.y * c);\n\n    this.x = x;\n    this.y = y;\n    return this\n  }\n\n  public rotateAroundPivot(pivot: V2, angleRad: number){\n\n    const cos = Math.cos(angleRad);\n    const sin = Math.sin(angleRad);\n    const dx = this.x - pivot.x;\n    const dy = this.y - pivot.y;\n    const x = cos * dx - sin * dy + pivot.x;\n    const y = sin * dx + cos * dy + pivot.y;\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  public normal(){\n    let x = -this.y;\n    let y = this.x;\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n\n\n  public lerp(v:V2,amt:number){\n    let x = lerp(this.x,v.x,amt);\n    let y = lerp(this.y,v.y,amt);\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  public floorValues(){\n    this.x = this.x|0;\n    this.y = this.y|0;\n    return this;\n  }\n\n  public isInPolygon(poly:V2[]){\n    return V2.isPointInPolygon(this,poly)\n  }\n\n}\n\nexport { v2,V2 }\n\n", "import {atan2, lerp} from './common'\n\nexport const v3 = (x: number = 0, y: number = 0, z: number = 0) => {\n    return new V3(x, y, z);\n}\n\nexport class V3 {\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    static lerp(v1: V3, v2: V3, amt: number) {\n        let x = lerp(v1.x, v2.x, amt);\n        let y = lerp(v1.y, v2.y, amt);\n        let z = lerp(v1.z, v2.z, amt);\n        return v3(x, y, z);\n    }\n\n    static clone(v: V3) {\n        return v3(v.x, v.y, v.z);\n    }\n\n    static zero() {\n        return v3(0, 0, 0);\n    }\n\n    static up() {\n        return v3(0, 1.0, 0);\n    }\n\n    static add(a: V3, b: V3) {\n        let x = a.x + b.x;\n        let y = a.y + b.y;\n        let z = a.z + b.z;\n        return v3(x, y, z);\n    }\n\n    static sub(a: V3, b: V3) {\n        let x = a.x - b.x;\n        let y = a.y - b.y;\n        let z = a.z - b.z;\n        return v3(x, y, z);\n    }\n\n    static mult(v: V3, factor: number) {\n        let x = v.x * factor;\n        let y = v.y * factor;\n        let z = v.z * factor;\n        return v3(x, y, z);\n    }\n\n    static multiply(v: V3, factor: number) {\n        return V3.mult(v, factor);\n    }\n\n\n    static divide(v: V3, n0: number) {\n        if (n0 === 0) {\n            throw Error(\"Division by 0\")\n        }\n        let n = 1 / n0;\n        return V3.mult(v, n);\n    }\n\n    static cross(a: V3, b: V3) {\n\n        let x = a.y * b.z - a.z * b.y;\n        let y = a.z * b.x - a.x * b.z;\n        let z = a.x * b.y - a.y * b.x;\n\n        return new V3(x, y, z)\n\n    }\n\n    static dot(a: V3, b: V3) {\n        return (a.x * b.x + a.y * b.y + a.z * b.z)\n    }\n\n    static abs(v: V3){\n        return v3(Math.abs(v.x), Math.abs(v.y), Math.abs(v.z));\n    }\n\n    static max(v1:V3, v2:V3){\n        let x = Math.max(v1.x, v2.x);\n        let y = Math.max(v1.y, v2.y);\n        let z = Math.max(v1.z, v2.z);\n\n        return v3(x, y, z);\n    }\n\n\n    zero(): V3 {\n        this.x = this.y = this.z = 0;\n        return this;\n    }\n\n    clone() {\n        return v3(this.x, this.y, this.z);\n    }\n\n    abs(){\n        this.x = Math.abs(this.x);\n        this.y = Math.abs(this.y);\n        this.z = Math.abs(this.z);\n        return this;\n    }\n\n    add(v: V3): V3 {\n        this.x = this.x + v.x;\n        this.y = this.y + v.y;\n        this.z = this.z + v.z;\n        return this;\n    }\n\n    max(v2:V3){\n        this.x = Math.max(this.x, v2.x);\n        this.y = Math.max(this.y, v2.y);\n        this.z = Math.max(this.z, v2.z);\n    }\n\n    sub(v: V3): V3 {\n        this.x = this.x - v.x;\n        this.y = this.y - v.y;\n        this.z = this.z - v.z;\n        return this;\n    }\n\n    mult(n: number): V3 {\n        this.x = this.x * n;\n        this.y = this.y * n;\n        this.z = this.z * n;\n        return this;\n    }\n\n    multiply(n: number): V3 {\n        return this.mult(n);\n    }\n\n\n    public divide(n0: number): V3 {\n        let n = 1 / n0;\n        this.x = this.x * n;\n        this.y = this.y * n;\n        this.z = this.z * n;\n        return this;\n    }\n\n    dot(v: V3) {\n        return (this.x * v.x + this.y * v.y + this.z * v.z)\n    }\n\n    dotProd(v: V3) {\n        return this.dot(v);\n    }\n\n\n    cross(b: V3) {\n        const ax = this.x, ay = this.y, az = this.z;\n        const bx = b.x, by = b.y, bz = b.z;\n\n        let x = ay * bz - az * by;\n        let y = az * bx - ax * bz;\n        let z = ax * by - ay * bx;\n\n        return new V3(x, y, z)\n\n    }\n\n    crossProd(b: V3) {\n        return this.cross(b)\n    }\n\n    lengthSq() {\n\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    magnitude() {\n        return this.length();\n    }\n\n    normalize() {\n        return this.divide(this.length() || 1);\n    }\n\n    unitVector() {\n        return this.normalize();\n    }\n\n\n    static transformCoordinates(v: V3, mat: Matrix4) {\n        const {x, y, z} = v;\n        let m = mat.m;\n        const rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n        const ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n        const rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n        const rw = x * m[3] + y * m[7] + z * m[11] + m[15];\n\n        return v3(rx/rw, ry/rw, rz)\n\n    }\n\n    static multiplyWithMatrix(v: V3, mat: Matrix4){\n        const {x, y, z} = v;\n        let m = mat.m;\n        const rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n        const ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n        const rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n        const rw = x * m[3] + y * m[7] + z * m[11] + m[15];\n\n        return v3(rx, ry, rz)\n    }\n\n    floorValues() {\n        this.x = this.x|0;\n        this.y = this.y|0;\n        this.z = this.z|0;\n        return this;\n    }\n\n    angleXY() {\n        return atan2(this.x, this.y);\n    }\n\n    toArray() {\n        return [this.x, this.y, this.z];\n    }\n}\n\nexport class Matrix4 {\n    m: number[];\n\n    constructor() {\n        this.m = [];\n    }\n\n\n    public determinant(): number {\n        var temp1 = (this.m[10] * this.m[15]) - (this.m[11] * this.m[14]);\n        var temp2 = (this.m[9] * this.m[15]) - (this.m[11] * this.m[13]);\n        var temp3 = (this.m[9] * this.m[14]) - (this.m[10] * this.m[13]);\n        var temp4 = (this.m[8] * this.m[15]) - (this.m[11] * this.m[12]);\n        var temp5 = (this.m[8] * this.m[14]) - (this.m[10] * this.m[12]);\n        var temp6 = (this.m[8] * this.m[13]) - (this.m[9] * this.m[12]);\n        return ((((this.m[0] * (((this.m[5] * temp1) - (this.m[6] * temp2)) + (this.m[7] * temp3))) - (this.m[1] * (((this.m[4] * temp1) - (this.m[6] * temp4)) + (this.m[7] * temp5)))) + (this.m[2] * (((this.m[4] * temp2) - (this.m[5] * temp4)) + (this.m[7] * temp6)))) - (this.m[3] * (((this.m[4] * temp3) - (this.m[5] * temp5)) + (this.m[6] * temp6))));\n    }\n\n    public toArray(): any[] {\n        return this.m;\n    }\n\n    public invert(): void {\n        var l1 = this.m[0];\n        var l2 = this.m[1];\n        var l3 = this.m[2];\n        var l4 = this.m[3];\n        var l5 = this.m[4];\n        var l6 = this.m[5];\n        var l7 = this.m[6];\n        var l8 = this.m[7];\n        var l9 = this.m[8];\n        var l10 = this.m[9];\n        var l11 = this.m[10];\n        var l12 = this.m[11];\n        var l13 = this.m[12];\n        var l14 = this.m[13];\n        var l15 = this.m[14];\n        var l16 = this.m[15];\n        var l17 = (l11 * l16) - (l12 * l15);\n        var l18 = (l10 * l16) - (l12 * l14);\n        var l19 = (l10 * l15) - (l11 * l14);\n        var l20 = (l9 * l16) - (l12 * l13);\n        var l21 = (l9 * l15) - (l11 * l13);\n        var l22 = (l9 * l14) - (l10 * l13);\n        var l23 = ((l6 * l17) - (l7 * l18)) + (l8 * l19);\n        var l24 = -(((l5 * l17) - (l7 * l20)) + (l8 * l21));\n        var l25 = ((l5 * l18) - (l6 * l20)) + (l8 * l22);\n        var l26 = -(((l5 * l19) - (l6 * l21)) + (l7 * l22));\n        var l27 = 1.0 / ((((l1 * l23) + (l2 * l24)) + (l3 * l25)) + (l4 * l26));\n        var l28 = (l7 * l16) - (l8 * l15);\n        var l29 = (l6 * l16) - (l8 * l14);\n        var l30 = (l6 * l15) - (l7 * l14);\n        var l31 = (l5 * l16) - (l8 * l13);\n        var l32 = (l5 * l15) - (l7 * l13);\n        var l33 = (l5 * l14) - (l6 * l13);\n        var l34 = (l7 * l12) - (l8 * l11);\n        var l35 = (l6 * l12) - (l8 * l10);\n        var l36 = (l6 * l11) - (l7 * l10);\n        var l37 = (l5 * l12) - (l8 * l9);\n        var l38 = (l5 * l11) - (l7 * l9);\n        var l39 = (l5 * l10) - (l6 * l9);\n        this.m[0] = l23 * l27;\n        this.m[4] = l24 * l27;\n        this.m[8] = l25 * l27;\n        this.m[12] = l26 * l27;\n        this.m[1] = -(((l2 * l17) - (l3 * l18)) + (l4 * l19)) * l27;\n        this.m[5] = (((l1 * l17) - (l3 * l20)) + (l4 * l21)) * l27;\n        this.m[9] = -(((l1 * l18) - (l2 * l20)) + (l4 * l22)) * l27;\n        this.m[13] = (((l1 * l19) - (l2 * l21)) + (l3 * l22)) * l27;\n        this.m[2] = (((l2 * l28) - (l3 * l29)) + (l4 * l30)) * l27;\n        this.m[6] = -(((l1 * l28) - (l3 * l31)) + (l4 * l32)) * l27;\n        this.m[10] = (((l1 * l29) - (l2 * l31)) + (l4 * l33)) * l27;\n        this.m[14] = -(((l1 * l30) - (l2 * l32)) + (l3 * l33)) * l27;\n        this.m[3] = -(((l2 * l34) - (l3 * l35)) + (l4 * l36)) * l27;\n        this.m[7] = (((l1 * l34) - (l3 * l37)) + (l4 * l38)) * l27;\n        this.m[11] = -(((l1 * l35) - (l2 * l37)) + (l4 * l39)) * l27;\n        this.m[15] = (((l1 * l36) - (l2 * l38)) + (l3 * l39)) * l27;\n    }\n\n    public multiply(other: Matrix4): Matrix4 {\n        let result = new Matrix4();\n        result.m[0] = this.m[0] * other.m[0] + this.m[1] * other.m[4] + this.m[2] * other.m[8] + this.m[3] * other.m[12];\n        result.m[1] = this.m[0] * other.m[1] + this.m[1] * other.m[5] + this.m[2] * other.m[9] + this.m[3] * other.m[13];\n        result.m[2] = this.m[0] * other.m[2] + this.m[1] * other.m[6] + this.m[2] * other.m[10] + this.m[3] * other.m[14];\n        result.m[3] = this.m[0] * other.m[3] + this.m[1] * other.m[7] + this.m[2] * other.m[11] + this.m[3] * other.m[15];\n        result.m[4] = this.m[4] * other.m[0] + this.m[5] * other.m[4] + this.m[6] * other.m[8] + this.m[7] * other.m[12];\n        result.m[5] = this.m[4] * other.m[1] + this.m[5] * other.m[5] + this.m[6] * other.m[9] + this.m[7] * other.m[13];\n        result.m[6] = this.m[4] * other.m[2] + this.m[5] * other.m[6] + this.m[6] * other.m[10] + this.m[7] * other.m[14];\n        result.m[7] = this.m[4] * other.m[3] + this.m[5] * other.m[7] + this.m[6] * other.m[11] + this.m[7] * other.m[15];\n        result.m[8] = this.m[8] * other.m[0] + this.m[9] * other.m[4] + this.m[10] * other.m[8] + this.m[11] * other.m[12];\n        result.m[9] = this.m[8] * other.m[1] + this.m[9] * other.m[5] + this.m[10] * other.m[9] + this.m[11] * other.m[13];\n        result.m[10] = this.m[8] * other.m[2] + this.m[9] * other.m[6] + this.m[10] * other.m[10] + this.m[11] * other.m[14];\n        result.m[11] = this.m[8] * other.m[3] + this.m[9] * other.m[7] + this.m[10] * other.m[11] + this.m[11] * other.m[15];\n        result.m[12] = this.m[12] * other.m[0] + this.m[13] * other.m[4] + this.m[14] * other.m[8] + this.m[15] * other.m[12];\n        result.m[13] = this.m[12] * other.m[1] + this.m[13] * other.m[5] + this.m[14] * other.m[9] + this.m[15] * other.m[13];\n        result.m[14] = this.m[12] * other.m[2] + this.m[13] * other.m[6] + this.m[14] * other.m[10] + this.m[15] * other.m[14];\n        result.m[15] = this.m[12] * other.m[3] + this.m[13] * other.m[7] + this.m[14] * other.m[11] + this.m[15] * other.m[15];\n        return result;\n    }\n\n    public equals(value: Matrix4): boolean {\n        return (this.m[0] === value.m[0] && this.m[1] === value.m[1] && this.m[2] === value.m[2] && this.m[3] === value.m[3] && this.m[4] === value.m[4] && this.m[5] === value.m[5] && this.m[6] === value.m[6] && this.m[7] === value.m[7] && this.m[8] === value.m[8] && this.m[9] === value.m[9] && this.m[10] === value.m[10] && this.m[11] === value.m[11] && this.m[12] === value.m[12] && this.m[13] === value.m[13] && this.m[14] === value.m[14] && this.m[15] === value.m[15]);\n    }\n\n    static fromValues(initialM11: number, initialM12: number, initialM13: number, initialM14: number, initialM21: number, initialM22: number, initialM23: number, initialM24: number, initialM31: number, initialM32: number, initialM33: number, initialM34: number, initialM41: number, initialM42: number, initialM43: number, initialM44: number): Matrix4 {\n        var result = new Matrix4();\n        result.m[0] = initialM11;\n        result.m[1] = initialM12;\n        result.m[2] = initialM13;\n        result.m[3] = initialM14;\n        result.m[4] = initialM21;\n        result.m[5] = initialM22;\n        result.m[6] = initialM23;\n        result.m[7] = initialM24;\n        result.m[8] = initialM31;\n        result.m[9] = initialM32;\n        result.m[10] = initialM33;\n        result.m[11] = initialM34;\n        result.m[12] = initialM41;\n        result.m[13] = initialM42;\n        result.m[14] = initialM43;\n        result.m[15] = initialM44;\n        return result;\n    }\n\n    static identity(): Matrix4 {\n        return Matrix4.fromValues(\n            1.0, 0, 0, 0,\n            0, 1.0, 0, 0,\n            0, 0, 1.0, 0,\n            0, 0, 0, 1.0\n        );\n    }\n\n    static zero(): Matrix4 {\n        return Matrix4.fromValues(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n\n    static copy(source: Matrix4): Matrix4 {\n        return Matrix4.fromValues(source.m[0], source.m[1], source.m[2], source.m[3], source.m[4], source.m[5], source.m[6], source.m[7], source.m[8], source.m[9], source.m[10], source.m[11], source.m[12], source.m[13], source.m[14], source.m[15]);\n    }\n\n    static rotationX(angle: number): Matrix4 {\n        var result = Matrix4.zero();\n        var s = Math.sin(angle);\n        var c = Math.cos(angle);\n        result.m[0] = 1.0;\n        result.m[15] = 1.0;\n        result.m[5] = c;\n        result.m[10] = c;\n        result.m[9] = -s;\n        result.m[6] = s;\n        return result;\n    }\n\n    static rotationY(angle: number): Matrix4 {\n        var result = Matrix4.zero();\n        var s = Math.sin(angle);\n        var c = Math.cos(angle);\n        result.m[5] = 1.0;\n        result.m[15] = 1.0;\n        result.m[0] = c;\n        result.m[2] = -s;\n        result.m[8] = s;\n        result.m[10] = c;\n        return result;\n    }\n\n    static rotationZ(angle: number): Matrix4 {\n        var result = Matrix4.zero();\n        var s = Math.sin(angle);\n        var c = Math.cos(angle);\n        result.m[10] = 1.0;\n        result.m[15] = 1.0;\n        result.m[0] = c;\n        result.m[1] = s;\n        result.m[4] = -s;\n        result.m[5] = c;\n        return result;\n    }\n\n    static rotationAxis(axis: V3, angle: number): Matrix4 {\n        var s = Math.sin(-angle);\n        var c = Math.cos(-angle);\n        var c1 = 1 - c;\n        axis.normalize();\n        var result = Matrix4.zero();\n        result.m[0] = (axis.x * axis.x) * c1 + c;\n        result.m[1] = (axis.x * axis.y) * c1 - (axis.z * s);\n        result.m[2] = (axis.x * axis.z) * c1 + (axis.y * s);\n        result.m[3] = 0.0;\n        result.m[4] = (axis.y * axis.x) * c1 + (axis.z * s);\n        result.m[5] = (axis.y * axis.y) * c1 + c;\n        result.m[6] = (axis.y * axis.z) * c1 - (axis.x * s);\n        result.m[7] = 0.0;\n        result.m[8] = (axis.z * axis.x) * c1 - (axis.y * s);\n        result.m[9] = (axis.z * axis.y) * c1 + (axis.x * s);\n        result.m[10] = (axis.z * axis.z) * c1 + c;\n        result.m[11] = 0.0;\n        result.m[15] = 1.0;\n        return result;\n    }\n\n    static rotationYawPitchRoll(yaw: number, pitch: number, roll: number): Matrix4 {\n        return Matrix4.rotationZ(roll).multiply(Matrix4.rotationX(pitch)).multiply(Matrix4.rotationY(yaw));\n    }\n\n    static scaling(x: number, y: number, z: number): Matrix4 {\n        var result = Matrix4.zero();\n        result.m[0] = x;\n        result.m[5] = y;\n        result.m[10] = z;\n        result.m[15] = 1.0;\n        return result;\n    }\n\n    static translation(x: number, y: number, z: number): Matrix4 {\n        var result = Matrix4.identity();\n        result.m[12] = x;\n        result.m[13] = y;\n        result.m[14] = z;\n        return result;\n    }\n\n    static lookAtLH(eye: V3, target: V3, up: V3): Matrix4 {\n        var zAxis = target.clone().sub(eye);\n        zAxis.normalize();\n        var xAxis = V3.cross(up, zAxis);\n        xAxis.normalize();\n        var yAxis = V3.cross(zAxis, xAxis);\n        yAxis.normalize();\n        var ex = -V3.dot(xAxis, eye);\n        var ey = -V3.dot(yAxis, eye);\n        var ez = -V3.dot(zAxis, eye);\n        return Matrix4.fromValues(\n            xAxis.x, yAxis.x, zAxis.x, 0,\n            xAxis.y, yAxis.y, zAxis.y, 0,\n            xAxis.z, yAxis.z, zAxis.z, 0,\n            ex, ey, ez, 1);\n    }\n\n\n    static orthoLH(left: number, right:number, top:number, bottom: number, znear: number, zfar: number): Matrix4 {\n        var M4 = Matrix4.zero();\n        M4.m[0] = 2.0 / (right-left);\n        M4.m[1] = 0;\n        M4.m[2] = 0;\n        M4.m[3] = 0;\n        //---\n        M4.m[4] = 0;\n        M4.m[5] = 2.0 / (top-bottom);\n        M4.m[6] = 0;\n        M4.m[7] = 0;\n        //---\n        M4.m[8] = 0;\n        M4.m[9] = 0;\n        M4.m[10] = 2.0 / (znear - zfar);\n        M4.m[11] = 0;\n        //---\n        M4.m[12] = -(right+left) / (right-left);\n        M4.m[13] = -(top+bottom) / (top-bottom);\n        M4.m[14] = (zfar+znear) / (zfar-znear);\n        M4.m[15] = 1.0;\n        return M4;\n    }\n\n\n\n\n    static perspectiveFovLH(fov: number, aspect: number, znear: number, zfar: number): Matrix4 {\n        var M4 = Matrix4.zero();\n        var tan = 1.0 / (Math.tan(fov*0.5));\n\n        M4.m[0] = tan / aspect;\n        M4.m[1] = 0;\n        M4.m[2] = 0;\n        M4.m[3] = 0;\n        //---\n        M4.m[4] = 0;\n        M4.m[5] = tan;\n        M4.m[6] = 0;\n        M4.m[7] = 0.0;\n        //---\n        M4.m[8] = 0;\n        M4.m[9] = 0;\n        M4.m[10] = -zfar / (znear - zfar);\n        M4.m[11] = 1.0;\n        //---\n        M4.m[12] = 0;\n        M4.m[13] = 0;\n        M4.m[14] = (znear * zfar) / (znear - zfar);\n        M4.m[15] = 0;\n\n        return M4;\n    }\n\n     static perspectiveFovLHToRef(\n        fov: number,\n        aspect: number,\n        znear: number,\n        zfar: number,\n        isVerticalFovFixed = true,\n        halfZRange?: boolean,\n        projectionPlaneTilt: number = 0,\n        reverseDepthBufferMode: boolean = false\n    ) {\n        const n = znear;\n        const f = zfar;\n\n        const t = 1.0 / Math.tan(fov * 0.5);\n        const a = isVerticalFovFixed ? t / aspect : t;\n        const b = isVerticalFovFixed ? t : t * aspect;\n        const c = reverseDepthBufferMode && n === 0 ? -1 : f !== 0 ? (f + n) / (f - n) : 1;\n        const d = reverseDepthBufferMode && n === 0 ? 2 * f : f !== 0 ? (-2.0 * f * n) / (f - n) : -2 * n;\n        const rot = Math.tan(projectionPlaneTilt);\n\n        return Matrix4.fromValues(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, rot, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0);\n\n\n    }\n\n    static transpose(mat: Matrix4): Matrix4 {\n        let result = new Matrix4();\n        result.m[0] = mat.m[0];\n        result.m[1] = mat.m[4];\n        result.m[2] = mat.m[8];\n        result.m[3] = mat.m[12];\n        result.m[4] = mat.m[1];\n        result.m[5] = mat.m[5];\n        result.m[6] = mat.m[9];\n        result.m[7] = mat.m[13];\n        result.m[8] = mat.m[2];\n        result.m[9] = mat.m[6];\n        result.m[10] = mat.m[10];\n        result.m[11] = mat.m[14];\n        result.m[12] = mat.m[3];\n        result.m[13] = mat.m[7];\n        result.m[14] = mat.m[11];\n        result.m[15] = mat.m[15];\n        return result;\n    }\n\n\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "PI", "PI2", "RND", "V2", "V3", "atan", "atan2", "ceil", "clamp", "cos", "createPseudoPoissonDistribution", "dist", "exp", "floor", "fract", "isEven", "lerp", "log", "make2dArray", "make2dSquareArray", "map", "mix", "modWrap", "pickRandom", "pickRandomFromArray", "pow", "quinticinterpol", "random", "random2", "randomWeightedFromArray", "resetRNDHASH", "rnd", "rndInt", "round", "sawTooth", "shuffleArray", "sin", "smoothstep", "sqrt", "swapVals", "tan", "v2", "v3", "weightedRandomLn", "__toCommonJS", "PI", "log", "sin", "cos", "tan", "atan", "atan2", "random", "floor", "ceil", "sqrt", "round", "exp", "pow", "PI2", "map", "n", "start", "stop", "targetStart", "targetStop", "lerp", "amt", "mix", "dist", "ax", "ay", "bx", "by", "rnd", "a", "b", "mathrandom", "RND", "rndInt", "low", "high", "random2", "seed", "x", "mulberry32RND", "mullBerryRND", "resetRNDHASH", "hash", "weightedRandomLn", "rand0to1", "zeroHasHeigherProb", "e", "pickRandom", "args", "len", "rnd", "RND", "pickRandomFromArray", "arr", "splice", "_rnd", "fract", "x", "clamp", "min", "max", "modWrap", "smoothstep", "edge0", "edge1", "t", "quinticinterpol", "x0", "createPseudoPoissonDistribution", "OPT", "W", "H", "size", "perc", "hasShiftRow", "dots", "anzX", "anzY", "i", "row", "j", "shiftrow", "_rnd2", "phi", "dr", "weightedRandomLn", "dx", "dy", "V2", "randomWeightedFromArray", "probSum", "prev", "curr", "iterate", "item", "itm", "swapVals", "a", "b", "temp", "isEven", "n", "sawTooth", "_x", "A", "result", "make2dSquareArray", "MAP_DIMENSION", "map3d", "iy", "ix", "make2dArray", "MAP_DIMENSION_Y", "MAP_DIMENSION_X", "shuffleArray", "array", "currentIndex", "randomIndex", "v2", "x", "y", "V2", "_V2", "a", "b", "pA", "pA2", "pB", "pB2", "x1", "y1", "x2", "y2", "x3", "y3", "x4", "y4", "denominator", "ua", "ub", "p", "poly", "len", "inside", "i", "j", "mag", "angle", "v", "v1", "vector", "scalar", "v0", "unitVector", "a00", "a01", "a10", "a11", "ux", "uy", "point", "pivot", "angleRad", "cos", "sin", "dx", "dy", "amt", "lerp", "rad", "degree", "rand", "rnd", "c", "s", "v3", "x", "y", "z", "V3", "_V3", "v1", "v2", "amt", "lerp", "v", "a", "b", "factor", "n0", "n", "ax", "ay", "az", "bx", "by", "bz", "mat", "m", "rx", "ry", "rz", "rw", "atan2"]
}
